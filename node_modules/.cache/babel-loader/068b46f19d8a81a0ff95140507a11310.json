{"ast":null,"code":"var _jsxFileName = \"F:\\\\react\\\\counter-app\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: this.props.value // tags: [\"tag1\",\"tag2\",\"tag3\"]\n\n    };\n\n    this.handleIncrement = product => {\n      console.log(product.id);\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n\n    this.reset = () => {\n      this.setState({\n        count: this.state.count = 0\n      });\n    };\n\n    this.formatCount = () => {\n      const count = this.state.count;\n      return count === 0 ? \"Zero\" : count;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"badge badge-primary m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"button\", {\n      onClick: () => this.handleIncrement(this.props),\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.reset,\n      className: \"btn1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"reset\")));\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["F:\\react\\counter-app\\src\\components\\counter.jsx"],"names":["React","Component","Counter","state","count","props","value","handleIncrement","product","console","log","id","setState","reset","formatCount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BE,KAD4B,GACpB;AACJC,MAAAA,KAAK,EAAG,KAAKC,KAAL,CAAWC,KADf,CAEJ;;AAFI,KADoB;;AAAA,SAM5BC,eAN4B,GAMTC,OAAD,IAAa;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,EAApB;AACA,WAAKC,QAAL,CAAc;AAACR,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAiB;AAAzB,OAAd;AACH,KAT2B;;AAAA,SAW5BS,KAX4B,GAWpB,MAAM;AACV,WAAKD,QAAL,CAAc;AAACR,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA3B,OAAd;AACH,KAb2B;;AAAA,SA2B5BU,WA3B4B,GA2Bd,MAAK;AAAA,YACRV,KADQ,GACC,KAAKD,KADN,CACRC,KADQ;AAEf,aAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACH,KA9B2B;AAAA;;AAe5BW,EAAAA,MAAM,GAAG;AACL,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ;AAAM,MAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2C,KAAKD,WAAL,EAA3C,CADI,EAEJ;AAAQ,MAAA,OAAO,EAAG,MAAK,KAAKP,eAAL,CAAqB,KAAKF,KAA1B,CAAvB;AAAyD,MAAA,SAAS,EAAC,KAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFI,EAGJ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAQ,MAAA,OAAO,EAAE,KAAKQ,KAAtB;AAA6B,MAAA,SAAS,EAAC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,CAHI,CAAR;AASH;;AAzB2B;;AAiChC,eAAeX,OAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    state = {  \r\n        count : this.props.value\r\n        // tags: [\"tag1\",\"tag2\",\"tag3\"]\r\n    }; \r\n\r\n    handleIncrement = (product) => {\r\n        console.log(product.id);\r\n        this.setState({count: this.state.count+1});\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({count: this.state.count = 0});\r\n    };\r\n\r\n    render() { \r\n        return (<div>\r\n            <span className=\"badge badge-primary m-2\">{this.formatCount()}</span>\r\n            <button onClick={ ()=> this.handleIncrement(this.props)} className=\"btn\">Increment</button>\r\n            <React.Fragment>\r\n            <button onClick={this.reset} className=\"btn1\">reset</button>\r\n            </React.Fragment>  \r\n            {/* <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul> */}\r\n            </div>\r\n            );\r\n    }\r\n\r\n    formatCount = ()=> {\r\n        const {count} = this.state;\r\n        return count === 0 ? \"Zero\" : count;\r\n    }\r\n}\r\n \r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}